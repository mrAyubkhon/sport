// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  bio       String?
  age       Int?
  weight    Float?
  height    Float?
  role      String   @default("USER") // "USER" or "ADMIN"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  achievements  Achievement[]
  notifications Notification[]
  
  // Friends relations (many-to-many)
  sentFriendRequests     FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
  friendships1           Friendship[]    @relation("User1")
  friendships2           Friendship[]    @relation("User2")

  @@map("users")
}

model Achievement {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "running", "swimming", "cycling", "custom"
  name      String?  // For custom activities
  value     Float    // Distance in km or meters
  unit      String   // "km", "m", "min", "reps"
  duration  Int?     // Duration in minutes
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model FriendRequest {
  id       String             @id @default(cuid())
  senderId String
  receiverId String
  status   String              @default("PENDING")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friendship {
  id        String   @id @default(cuid())
  user1Id   String
  user2Id   String
  createdAt DateTime @default(now())

  user1 User @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 User @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@map("friendships")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean          @default(false)
  data      String?          // Additional data for the notification (JSON string)
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

// Enums replaced with String type for SQLite compatibility
